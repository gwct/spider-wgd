var_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.repeat.all, num.not.repeat)
var_repeat_chi = chisq.test(var_repeat_data)
var_gene_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.gene.all, num.not.gene)
var_gene_chi = chisq.test(var_gene_data)
# print(chi)
read_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.repeat.all, num.not.repeat)
read_repeat_chi = chisq.test(read_repeat_data)
read_gene_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.gene.all, num.not.gene)
read_gene_chi = chisq.test(read_gene_data)
chi_data = rbind(chi_data, data.frame("divergence"=div, "var.repeat.chi.p"=var_repeat_chi$p.value,"var.gene.chi.p"=var_gene_chi$p.value, "read.repeat.chi.p"=read_repeat_chi$p.value, "read.gene.chi.p"=read_gene_chi$p.value))
}
classes = c("prop.repeat.uniq", "prop.shared", "prop.gene.uniq", "prop.none")
class_names = c("Repeats", "Both", "Genes", "None")
# The various classes of reads
####################
long_unmapped_data = unmapped_data %>%
select(iteration, divergence, prop.repeat.uniq, prop.shared, prop.gene.uniq, prop.none) %>%
pivot_longer(cols=c("prop.repeat.uniq",  "prop.shared", "prop.gene.uniq", "prop.none"))
# Convert to long format
long_unmapped_data$name = factor(long_unmapped_data$name, levels=classes)
# Factorize the read classes
cols = corecol(pal="wilke", numcol=4, offset=1)
# Get some colors
unmapped_p = ggplot(long_unmapped_data, aes(x=iteration, y=value, fill=name)) +
geom_bar(stat="identity", position=position_fill(reverse=TRUE)) +
xlab("Mapping iteration") +
ylab("Proportion of unmapped reads") +
ggtitle("By divergence") +
scale_y_continuous(expand=c(0,0), limits=c(0,1), breaks=seq(0, 1, by=0.2)) +
scale_fill_manual(labels=class_names, values=cols) +
facet_wrap(~divergence) +
bartheme() +
theme(legend.position="bottom") +
coord_flip()
print(unmapped_p)
####################
long_exact_data = exact_data %>%
select(iteration, divergence, prop.repeat.uniq, prop.shared, prop.gene.uniq, prop.none) %>%
pivot_longer(cols=c("prop.repeat.uniq",  "prop.shared", "prop.gene.uniq", "prop.none"))
# Convert to long format
long_exact_data$name = factor(long_exact_data$name, levels=classes)
# Factorize the read classes
cols = corecol(pal="wilke", numcol=4, offset=1)
# Get some colors
exact_p = ggplot(long_exact_data, aes(x=iteration, y=value, fill=name)) +
geom_bar(stat="identity", position=position_fill(reverse=TRUE)) +
xlab("Mapping iteration") +
ylab("Proportion of correctly mapped reads") +
ggtitle("By divergence") +
scale_y_continuous(expand=c(0,0), limits=c(0,1), breaks=seq(0, 1, by=0.2)) +
scale_fill_manual(labels=class_names, values=cols) +
facet_wrap(~divergence) +
bartheme() +
theme(legend.position="bottom") +
coord_flip()
print(exact_p)
####################
leg = get_legend(unmapped_p)
read_props_main = plot_grid(unmapped_p + theme(legend.position="none"), exact_p + theme(legend.position="none"), ncol=2, labels=c("Unmapped", "Correctly mapped"), label_size=14)
read_props_p = plot_grid(read_props_main, leg, nrow=2, rel_heights=c(1,0.1))
print(read_props_p)
exact_data_1 = exact_data %>% filter(iteration == 1)
unmapped_data_1 = unmapped_data %>% filter(iteration == 1)
####################
read_reps_p = ggplot(exact_data_1, aes(x=divergence, y=prop.repeat.all)) +
geom_segment(x=exact_data_1$divergence, xend=exact_data_1$divergence, y=exact_data_1$prop.repeat.all, yend=unmapped_data_1$prop.repeat.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=unmapped_data_1, aes(x=divergence, y=prop.repeat.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of reads\noverlapping with repeats") +
bartheme() +
theme(legend.position="bottom")
#print(var_reps_p)
####################
read_genes_p = ggplot(exact_data_1, aes(x=divergence, y=prop.gene.all)) +
geom_segment(x=exact_data_1$divergence, xend=exact_data_1$divergence, y=exact_data_1$prop.gene.all, yend=unmapped_data_1$prop.gene.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=unmapped_data_1, aes(x=divergence, y=prop.gene.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of reads\noverlapping with genes") +
bartheme() +
theme(legend.position="bottom")
#print(var_genes_p)
####################
leg = get_legend(var_reps_p)
exact_data_1 = exact_data %>% filter(iteration == 1)
unmapped_data_1 = unmapped_data %>% filter(iteration == 1)
####################
read_reps_p = ggplot(exact_data_1, aes(x=divergence, y=prop.repeat.all)) +
geom_segment(x=exact_data_1$divergence, xend=exact_data_1$divergence, y=exact_data_1$prop.repeat.all, yend=unmapped_data_1$prop.repeat.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=unmapped_data_1, aes(x=divergence, y=prop.repeat.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of reads\noverlapping with repeats") +
bartheme() +
theme(legend.position="bottom")
#print(var_reps_p)
####################
read_genes_p = ggplot(exact_data_1, aes(x=divergence, y=prop.gene.all)) +
geom_segment(x=exact_data_1$divergence, xend=exact_data_1$divergence, y=exact_data_1$prop.gene.all, yend=unmapped_data_1$prop.gene.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=unmapped_data_1, aes(x=divergence, y=prop.gene.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of reads\noverlapping with genes") +
bartheme() +
theme(legend.position="bottom")
#print(var_genes_p)
####################
leg = get_legend(read_reps_p)
read_props_main = plot_grid(read_reps_p + theme(legend.position="none"), read_genes_p + theme(legend.position="none"), ncol=2, labels=c("Repeats", "Genes"), label_size=14)
read_props_p = plot_grid(read_props_main, leg, nrow=2, rel_heights=c(1,0.1))
print(read_props_p)
classes = c("prop.repeat.uniq", "prop.shared", "prop.gene.uniq", "prop.none")
class_names = c("Repeats", "Both", "Genes", "None")
# The various classes of reads
####################
long_fn_data = fn_data %>%
select(iteration, divergence, prop.repeat.uniq, prop.shared, prop.gene.uniq, prop.none) %>%
pivot_longer(cols=c("prop.repeat.uniq",  "prop.shared", "prop.gene.uniq", "prop.none"))
# Convert to long format
long_fn_data$name = factor(long_fn_data$name, levels=classes)
# Factorize the read classes
cols = corecol(pal="wilke", numcol=4, offset=1)
# Get some colors
fns_p = ggplot(long_fn_data, aes(x=iteration, y=value, fill=name)) +
geom_bar(stat="identity", position=position_fill(reverse=TRUE)) +
xlab("Mapping iteration") +
ylab("Proportion of false negative variant calls") +
ggtitle("By divergence") +
scale_y_continuous(expand=c(0,0), limits=c(0,1), breaks=seq(0, 1, by=0.2)) +
scale_fill_manual(labels=class_names, values=cols) +
facet_wrap(~divergence) +
bartheme() +
theme(legend.position="bottom") +
coord_flip()
#print(fns_p)
####################
long_tp_data = tp_data %>%
select(iteration, divergence, prop.repeat.uniq, prop.shared, prop.gene.uniq, prop.none) %>%
pivot_longer(cols=c("prop.repeat.uniq",  "prop.shared", "prop.gene.uniq", "prop.none"))
# Convert to long format
long_tp_data$name = factor(long_tp_data$name, levels=classes)
# Factorize the read classes
cols = corecol(pal="wilke", numcol=4, offset=1)
# Get some colors
tps_p = ggplot(long_tp_data, aes(x=iteration, y=value, fill=name)) +
geom_bar(stat="identity", position=position_fill(reverse=TRUE)) +
xlab("Mapping iteration") +
ylab("Proportion of true positive variant calls") +
ggtitle("By divergence") +
scale_y_continuous(expand=c(0,0), limits=c(0,1), breaks=seq(0, 1, by=0.2)) +
scale_fill_manual(labels=class_names, values=cols) +
facet_wrap(~divergence) +
bartheme() +
theme(legend.position="bottom") +
coord_flip()
#print(tps_p)
####################
leg = get_legend(fns_p)
var_props_main = plot_grid(fns_p + theme(legend.position="none"), tps_p + theme(legend.position="none"), ncol=2, labels=c("False negative", "True positives"), label_size=14)
var_props_p = plot_grid(var_props_main, leg, nrow=2, rel_heights=c(1,0.1))
print(var_props_p)
tp_data_1 = tp_data %>% filter(iteration == 1)
fn_data_1 = fn_data %>% filter(iteration == 1)
####################
var_reps_p = ggplot(tp_data_1, aes(x=divergence, y=prop.repeat.all)) +
geom_segment(x=tp_data_1$divergence, xend=tp_data_1$divergence, y=tp_data_1$prop.repeat.all, yend=fn_data_1$prop.repeat.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=fn_data_1, aes(x=divergence, y=prop.repeat.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of variants\noverlapping with repeats") +
bartheme() +
theme(legend.position="bottom")
#print(var_reps_p)
####################
var_genes_p = ggplot(tp_data_1, aes(x=divergence, y=prop.gene.all)) +
geom_segment(x=tp_data_1$divergence, xend=tp_data_1$divergence, y=tp_data_1$prop.gene.all, yend=fn_data_1$prop.gene.all, color="#999999", size=1) +
geom_point(aes(color="True positives"), size=4) +
geom_point(data=fn_data_1, aes(x=divergence, y=prop.gene.all, color="False negatives"), size=4) +
scale_y_continuous(limits=c(0,1)) +
scale_color_manual(values=c("True positives"="#920000", "False negatives"=c(corecol(numcol=1)))) +
xlab("Divergence") +
ylab("Proportion of variants\noverlapping with genes") +
bartheme() +
theme(legend.position="bottom")
#print(var_genes_p)
####################
leg = get_legend(var_reps_p)
var_props_main = plot_grid(var_reps_p + theme(legend.position="none"), var_genes_p + theme(legend.position="none"), ncol=2, labels=c("Repeats", "Genes"), label_size=14)
var_props_p = plot_grid(var_props_main, leg, nrow=2, rel_heights=c(1,0.1))
print(var_props_p)
ann_data = ann_data %>%
mutate(prop.repeat.uniq = num.repeat.uniq / total) %>%
mutate(prop.gene.uniq = num.gene.uniq / total) %>%
mutate(prop.shared = num.shared / total) %>%
mutate(prop.none = num.none / total) %>%
mutate(num.repeat.all = num.repeat.uniq + num.shared) %>%
mutate(prop.repeat.all = num.repeat.all / total) %>%
mutate(num.not.repeat = num.gene.uniq + num.none) %>%
mutate(prop.not.repeat = num.not.repeat / total) %>%
mutate(num.gene.all = num.gene.uniq + num.shared) %>%
mutate(prop.gene.all = num.gene.all / total) %>%
mutate(num.not.gene = num.repeat.uniq + num.none) %>%
mutate(prop.not.gene = num.not.gene / total)
tp_data = ann_data %>% filter(type == "tps")
fn_data = ann_data %>% filter(type == "fns")
exact_data = ann_data %>% filter(type == "exact")
unmapped_data = ann_data %>% filter(type == "unmapped")
iter1_data = ann_data %>% filter(iteration == 1)
#iter1_data_var = iter1_data %>% group_by(divergence) %>% filter(type %in% c("tps", "fns")) %>% select(type, starts_with("prop"))
chi_data = NULL
for(div in levels(as.factor(iter1_data$divergence))){
tps = iter1_data %>% filter(divergence == div, type == "tps") %>% select(num.repeat.all, num.not.repeat, prop.repeat.all)
fns = iter1_data %>% filter(divergence == div, type == "fns") %>% select(num.repeat.all, num.not.repeat, prop.repeat.all)
var_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.repeat.all, num.not.repeat)
var_repeat_chi = chisq.test(var_repeat_data)
var_gene_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.gene.all, num.not.gene)
var_gene_chi = chisq.test(var_gene_data)
# print(chi)
read_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.repeat.all, num.not.repeat)
read_repeat_chi = chisq.test(read_repeat_data)
read_gene_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.gene.all, num.not.gene)
read_gene_chi = chisq.test(read_gene_data)
chi_data = rbind(chi_data, data.frame("divergence"=div, "var.repeat.chi.p"=var_repeat_chi$p.value,"var.gene.chi.p"=var_gene_chi$p.value, "read.repeat.chi.p"=read_repeat_chi$p.value, "read.gene.chi.p"=read_gene_chi$p.value))
}
chi_data
ann_data = ann_data %>%
mutate(prop.repeat.uniq = num.repeat.uniq / total) %>%
mutate(prop.gene.uniq = num.gene.uniq / total) %>%
mutate(prop.shared = num.shared / total) %>%
mutate(prop.none = num.none / total) %>%
mutate(num.repeat.all = num.repeat.uniq + num.shared) %>%
mutate(prop.repeat.all = num.repeat.all / total) %>%
mutate(num.not.repeat = num.gene.uniq + num.none) %>%
mutate(prop.not.repeat = num.not.repeat / total) %>%
mutate(num.gene.all = num.gene.uniq + num.shared) %>%
mutate(prop.gene.all = num.gene.all / total) %>%
mutate(num.not.gene = num.repeat.uniq + num.none) %>%
mutate(prop.not.gene = num.not.gene / total)
tp_data = ann_data %>% filter(type == "tps")
fn_data = ann_data %>% filter(type == "fns")
exact_data = ann_data %>% filter(type == "exact")
unmapped_data = ann_data %>% filter(type == "unmapped")
iter1_data = ann_data %>% filter(iteration == 1)
#iter1_data_var = iter1_data %>% group_by(divergence) %>% filter(type %in% c("tps", "fns")) %>% select(type, starts_with("prop"))
chi_data = NULL
for(div in levels(as.factor(iter1_data$divergence))){
tps = iter1_data %>% filter(divergence == div, type == "tps") %>% select(num.repeat.all, num.not.repeat, prop.repeat.all)
fns = iter1_data %>% filter(divergence == div, type == "fns") %>% select(num.repeat.all, num.not.repeat, prop.repeat.all)
var_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.repeat.all, num.not.repeat)
var_repeat_chi = chisq.test(var_repeat_data)
var_gene_data = iter1_data %>% filter(divergence == div, type %in% c("tps", "fns")) %>% select(num.gene.all, num.not.gene)
var_gene_chi = chisq.test(var_gene_data)
# print(chi)
read_repeat_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.repeat.all, num.not.repeat)
read_repeat_chi = chisq.test(read_repeat_data)
print(read_repeat_data)
read_gene_data = iter1_data %>% filter(divergence == div, type %in% c("exact", "unmapped")) %>% select(num.gene.all, num.not.gene)
read_gene_chi = chisq.test(read_gene_data)
chi_data = rbind(chi_data, data.frame("divergence"=div, "var.repeat.chi.p"=var_repeat_chi$p.value,"var.gene.chi.p"=var_gene_chi$p.value, "read.repeat.chi.p"=read_repeat_chi$p.value, "read.gene.chi.p"=read_gene_chi$p.value))
}
7480213 / 1144223
6785557 / 1034660
7480213 / 6785557
1144223 / 1034660
tracker_file = here("data", "mm39-30X-0.005h-tracker.tsv")
tracker_data = read_tsv(tracker_file)
tracker_data
ann_file = here("data", "mm39-30X-0.005h-annotations.tsv")
ann_data = read_tsv(ann_file)
# Load the annotation summaries
tracker_file = here("data", "mm39-30X-0.005h-tracker.tsv")
tracker_data = read_tsv(tracker_file)
####################
len_18 = 90720763
len_19 = 61420004
total_len = len_18# + len_19
## TODO: Use .fai file to do this automatically in the full sims
####################
tracker_data
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
here()
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
View(multi_grampa)
View(multi_grampa$scores)
multi_scores = ggplot(multi_grampa$scores, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_data_st_19, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_data_auto_19, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_data_19$rank)+10)) +
scale_color_manual(values=cols) +
xlab("Rank") +
ylab("GRAMPA score") +
bartheme() +
theme(legend.position="bottom")
grampa_scores = rbind(multi_grampa$scores, bal_grampa$scores, trad_grampa$scores)
grampa_st = grampa_scores %>% filter(mul.tree == 0)
grampa_auto = grampa_scores %>% filter(h1.node == h2.node & mul.tree != 0)
multi_scores = ggplot(grampa_scores, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("Rank") +
ylab("GRAMPA score") +
bartheme() +
theme(legend.position="bottom")
multi_scores
cols = corecol(numcol=3, pal="wilke")
names(cols) = c("ASTRAL-Multi", "Ballesteros et al. 2022", "Horseshoe crabs sister")
multi_scores = ggplot(grampa_scores, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("Rank") +
ylab("GRAMPA score") +
bartheme() +
theme(legend.position="bottom")
multi_scores
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
multi_scores
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
ggsave(filename=figfile, multi_scores, width=6, height=6, units="in")
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="right")
if(save_fig){
figfile = here("manuscript", "figs", "fig2.png")
cat(as.character(Sys.time()), " | Fig2: Saving figure:", figfile, "\n")
ggsave(filename=figfile, multi_scores, width=6, height=6, units="in")
}
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
if(save_fig){
figfile = here("manuscript", "figs", "fig2.png")
cat(as.character(Sys.time()), " | Fig2: Saving figure:", figfile, "\n")
ggsave(filename=figfile, multi_scores, width=6, height=6, units="in")
}
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(fill=guide_legend(nrow=2,byrow=TRUE))
multi_scores
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(nrow=2,byrow=TRUE))
multi_scores
if(save_fig){
figfile = here("manuscript", "figs", "fig2.png")
cat(as.character(Sys.time()), " | Fig2: Saving figure:", figfile, "\n")
ggsave(filename=figfile, multi_scores, width=6, height=6, units="in")
}
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(nrow=2))
print(multi_scores)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(nrow=2,byrow=TRUE))
print(multi_scores)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(name="Species tree", nrow=2, byrow=TRUE))
print(multi_scores)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(name="Species tree", values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(nrow=2, byrow=TRUE))
print(multi_scores)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(name="Species tree", values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom") +
guides(color=guide_legend(nrow=2, byrow=TRUE))
print(multi_scores)
View(bartheme)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(name="Species tree", values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom",
legend.title=element_text(size=12),
legend.text=element_text(size=10)) +
guides(color=guide_legend(nrow=2, byrow=TRUE))
print(multi_scores)
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(name="Species tree", values=cols) +
xlab("MUL-tree rank") +
ylab("# duplications + losses") +
bartheme() +
theme(legend.position="bottom",
legend.title=element_text(size=12),
legend.text=element_text(size=10)) +
guides(color=guide_legend(nrow=3, byrow=TRUE))
print(multi_scores)
ggsave(filename=figfile, multi_scores, width=6, height=6, units="in")
source("C:/bin/spider-wgd/manuscript/scripts/fig1.r")
multi_scores = ggplot(grampa_allo, aes(x=rank, y=score, color=label)) +
geom_point(size=2, alpha=0.33, show.legend=F) +
geom_point(data=grampa_st, aes(x=rank, y=score), size=3, alpha=0.75, color="#333333", fill="#999999") +
geom_point(data=grampa_auto, aes(x=rank, y=score, color=label), size=5, alpha=0.5) +
scale_x_continuous(limits=c(-10,max(grampa_scores$rank)+10)) +
scale_color_manual(name="Species tree", values=cols) +
xlab("MUL-tree rank") +
ylab("Duplications + losses") +
bartheme() +
theme(legend.position="right",
legend.title=element_text(size=12),
legend.text=element_text(size=10)) +
guides(color=guide_legend(nrow=3, byrow=TRUE))
print(multi_scores)
if(save_fig){
figfile = here("manuscript", "figs", "fig2.png")
cat(as.character(Sys.time()), " | Fig2: Saving figure:", figfile, "\n")
ggsave(filename=figfile, multi_scores, width=8, height=6, units="in")
}
View(genome_data)
