o <- order(p, decreasing = TRUE) # indices of the p-values in decreasing order
ro <- order(o) # indices of those indices in ascending order
pmin(1, cummin(m/i * p[o]))[ro]
?order
order(c(4,5,6))
order(c(4,6,7))
order(c(4,6,5))
source("C:/Users/Gregg/Desktop/ptest.r")
pn
9 / 10 * p[9]
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
i <- m:1L # descending vector with counts starting from number of tests until 1
o <- order(p, decreasing = TRUE) # indices of the p-values in decreasing order
ro <- order(o) # indices of those indices in ascending order
pmin(1, cummin(m/i * p[o]))[ro]
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
print(sort(p_man), decreasing=T)
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
sorted_p_values
sorted_p_values[2:m] * m / (i:m)
sorted_p_values[2:m] * m / (2:m)
p
source("C:/Users/Gregg/Desktop/ptest.r")
p
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
p[1]
p[1] * 10
p[1] * 10 / 10
source("C:/Users/Gregg/Desktop/ptest.r")
source("C:/Users/Gregg/Desktop/ptest.r")
p = sort(runif(10), decreasing=T) # generate 10 random p-values between 0 and 1
print(p)
p_adj = p.adjust(p, method="BH")
print(p_adj)
#po = sort(p, decreasing = TRUE)
m <- length(p) # number of tests
i <- order(p)
i
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
pn = (m * p[j]) / i[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
#
#   if(pn > 1){
#     pn = 1
#   }
p_man = c(p_man, pn)
i = i - 1
}
print(sort(p_man), decreasing=T)
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(p[j])
pn = (m * p[j]) / i[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
#
#   if(pn > 1){
#     pn = 1
#   }
p_man = c(p_man, pn)
i = i - 1
}
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m * p[j]) / i[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
#
#   if(pn > 1){
#     pn = 1
#   }
p_man = c(p_man, pn)
i = i - 1
}
#po = sort(p, decreasing = TRUE)
m <- length(p) # number of tests
i <- order(p)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m * p[j]) / i[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
#
#   if(pn > 1){
#     pn = 1
#   }
p_man = c(p_man, pn)
}
print(sort(p_man), decreasing=T)
5/25*0.5
5/25*0.1
5/25*0.24
5/25*0.25
i
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
#
#   if(pn > 1){
#     pn = 1
#   }
p_man = c(p_man, pn)
}
print(sort(p_man), decreasing=T)
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(sort(p_man), decreasing=T)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(sort(p_man), decreasing=T)
i
p
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
#print(paste(pn, prev_p))
# if(pn < prev_p){
#   pn = prev_p
# }
# prev_p = pn
#
# if(pn > 1){
#   pn = 1
# }
p_man = c(p_man, pn)
}
print(sort(p_man), decreasing=T)
print(sort(p_man, decreasing=T))
print(p_adj)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(sort(p_man, decreasing=T))
p
p_adj
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
stop()
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(prev_p)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
stop
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
stop()
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(sort(p_man, decreasing=T))
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
stop()
p_man = c(p_man, pn)
}
p_man
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
p_man = c(p_man, pn)
stop()
}
p_man
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
p_man = c(p_man, pn)
#stop()
}
print(sort(p_man, decreasing=T))
print(p_man)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn < prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
p_man = c(p_man, pn)
#stop()
print("----")
}
print(p_man)
p_man = c()
prev_p = -1
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn > prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
p_man = c(p_man, pn)
#stop()
print("----")
}
print(p_man)
p_man = c()
prev_p = 2
for(j in 1:m){
#print(i)
#pn = (i / length(p_man)) * 0.05
print(i[j])
print(p[j])
pn = (m / i[j]) * p[j]
print(pn)
print(prev_p)
#print(paste(pn, prev_p))
if(pn > prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
print(pn)
p_man = c(p_man, pn)
#stop()
print("----")
}
print(p_man)
p_adj
p_man = c()
prev_p = 2
for(j in 1:m){
pn = (m / i[j]) * p[j]
if(pn > prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(p_man)
p
p = runif(10)
print(p)
set.seed(123) # set seed for reproducibility
p = runif(10)
print(p)
p_adj
round(p)
round(p, 5)
p = round(sort(runif(10), decreasing=T), 5) # generate 10 random p-values between 0 and 1
#p = runif(10)
print(p)
p_adj = p.adjust(p, method="BH")
print(p_adj)
print(round(p_adj), 5)
set.seed(123) # set seed for reproducibility
p = round(sort(runif(10), decreasing=T), 5) # generate 10 random p-values between 0 and 1
#p = runif(10)
print(p)
p_adj = p.adjust(p, method="BH")
print(round(p_adj), 5)
print(round(p_adj, 5))
p_man = c()
prev_p = 2
for(j in 1:m){
pn = (m / i[j]) * p[j]
if(pn > prev_p){
pn = prev_p
}
prev_p = pn
print(pn)
if(pn > 1){
pn = 1
}
p_man = c(p_man, pn)
}
print(round(p_man, 5))
p_adj
p
p = round(runif(10), 5)
print(p)
set.seed(123) # set seed for reproducibility
p = round(runif(10), 5)
print(p)
p_adj = p.adjust(p, method="BH")
print(round(p_adj, 5))
print(round(sort(p_adj, decreasing=T), 5))
source("C:/bin/spider-wgd/manuscript/scripts/figs1-2.r")
source("C:/bin/spider-wgd/manuscript/scripts/figs1-2.r")
multi_plot
bal_plot
source("C:/bin/spider-wgd/manuscript/scripts/figs1-2.r")
