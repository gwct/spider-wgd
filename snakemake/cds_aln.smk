#############################################################################
# Pipeline for running CDS alignment 
# For spider WGD project
# Gregg Thomas, November 2021
#############################################################################

# snakemake -p -s cds_aln.smk --configfile guidance-cds.yaml --profile slurm_profile/ --dryrun

## TODO: Exclude loci with too few species?
## TODO: Trimal

#############################################################################

import os
import seqparse as SEQ

#############################################################################

INDIR = config["input_directory"];
OUTDIR = config["output_directory"];
INFILE = config["locus_file"];

CONDAPATH = config["conda_env_path"];
# Inputs for the snakemake pipeline are read from the config file generated by
# the interface

#############################################################################

loci = [ line.strip() for line in open(INFILE) ];
print(len(loci));

#############################################################################
# Final rule - rule that depends on final expected output file and initiates all
# the other rules

localrules: all

rule all:
    input:
        expand(os.path.join(OUTDIR, "01-Guidance", "{locus}", "{locus}.MAFFT.Without_low_SP_Col.With_Names"), locus=loci)
        # expand(os.path.join(OUTDIR, "01-Guidance", "{locus}", "{locus}-pep.MAFFT.Without_low_SP_Col.With_Names"), locus=loci),
# This rule just checks that some of the phyloacc output files are present for each batch

#############################################################################
# Pipeline rules

def get_mem(wildcards, attempt):
    mem = ["4g", "4g", "8g", "12g", "24g", "32g"];
    return mem[attempt];
# Sets the memory based on the number of times the job has been restarted

rule run_guidance:
    input:
        os.path.join(INDIR, "{locus}-cds.fa")
    output:
        aln_file = os.path.join(OUTDIR, "01-Guidance", "{locus}", "{locus}.MAFFT.Without_low_SP_Col.With_Names"),
        outdir = directory(os.path.join(OUTDIR, "01-Guidance", "{locus}"))
    params:
        locus = "{locus}",
    log:
        os.path.join(OUTDIR, "logs", "01-Guidance", "{locus}-cds.log")
    resources:
        cpus = 12
    shell:
        """
        perl -I {CONDAPATH}/lib/perl5/site_perl/5.22.0/ {CONDAPATH}/opt/guidance/www/Guidance/guidance.pl --seqFile {input} --msaProgram MAFFT --seqType codon --outDir {output.outdir} --dataset {params.locus} --proc_num {resources.cpus} &> {log}
        """

#############################################################################

# rule translate_alns:
#     input: 
#         expand(os.path.join(OUTDIR, "01-Guidance", "{locus}", "{locus}-cds.MAFFT.Without_low_SP_Col.With_Names"), locus=loci)
#     output:
#         os.path.join(OUTDIR, "01-Guidance", "{locus}", "{locus}-pep.MAFFT.Without_low_SP_Col.With_Names")
#     resources:
#         cpus=1
#     shell:
#         """
#         python ../scripts/translate_alns.py {INDIR}
#         """

#############################################################################