#############################################################################
# Pipeline for running CDS alignment 
# For spider WGD project
# Gregg Thomas, November 2021
#############################################################################

# snakemake -p -s cds_aln.smk --configfile guidance-cds.yaml --profile slurm_profile/ --dryrun


# Note the following failed alignment via snakemake and were run manually:
#  ORTHOMCL581
#  ORTHOMCL9454
#  ORTHOMCL136
#  ORTHOMCL1896
#  ORTHOMCL1400
#  ORTHOMCL4414

#############################################################################

import os
#import seqparse as SEQ

#############################################################################

INDIR = config["input_directory"]
DATADIR = config["data_directory"]

# ALNDIR = config["aln_directory"];
# TREEDIR = config["tree_directory"];
INFILE = config["locus_file"]

CONDAPATH = config["conda_env_path"]
# Inputs for the snakemake pipeline are read from the config file generated by
# the interface

#print(INDIR);
#print(INFILE);
#print(DATADIR);

#############################################################################

loci = [ line.strip() for line in open(INFILE) ];
#print(len(loci));

#FILTERFILE = os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "aln-filter-passed-spec4-seq20-site50.txt");
#filtered_loci = [ line.strip() for line in open(FILTERFILE, "r") if line.strip() != "" ];
#print(len(filtered_loci));
# Though this file would only be available after filter_alns...


#############################################################################
# Final rule - rule that depends on final expected output file and initiates all
# the other rules

localrules: all

rule all:
    input:
        expand(os.path.join(DATADIR, "aln", "01-Guidance", "{locus}", "{locus}.MAFFT.Without_low_SP_Col.With_Names"), locus=loci),
        # Output files from run_guidance

        #os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "aln-stats-spec4-seq20-site50.log"),
        #os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "aln-filter-passed-spec4-seq20-site50.log")
        # Output files from filter_alns

        #expand(os.path.join(DATADIR, "tree", "cds", "loci", "{filtered_locus}", "{filtered_locus}.treefile"), filtered_locus=filtered_loci)
# This rule just checks that some of the phyloacc output files are present for each batch

#############################################################################
# Pipeline rules

def get_mem(wildcards, attempt):
    mem = ["4g", "4g", "8g", "12g", "24g", "32g"];
    return mem[attempt];
# Sets the memory based on the number of times the job has been restarted

rule run_guidance:
    input:
        os.path.join(INDIR, "{locus}-cds.fa")
    output:
        aln_file = os.path.join(DATADIR, "aln", "01-Guidance", "{locus}", "{locus}.MAFFT.Without_low_SP_Col.With_Names"),
        output_directory = directory(os.path.join(DATADIR, "aln", "01-Guidance", "{locus}"))
    params:
        locus = "{locus}",
    log:
        os.path.join(DATADIR, "aln", "logs", "01-Guidance", "{locus}-cds.log")
    resources:
        cpus = 4
    shell:
        """
        perl -I {CONDAPATH}/lib/perl5/site_perl/5.22.0/ {CONDAPATH}/opt/guidance/www/Guidance/guidance.pl --seqFile {input} --msaProgram MAFFT --seqType codon --outDir {output.output_directory} --dataset {params.locus} --proc_num {resources.cpus} &> {log}
        """

#############################################################################

# rule filter_alns:
#     output:
#         stats_file = os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "aln-stats-spec4-seq20-site50.log"),
#         locus_file = os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "aln-filter-passed-spec4-seq20-site50.txt")
#     resources:
#         cpus=1
#     shell:
#         """
#         python /n/home07/gthomas/projects/spider-wgd/scripts/aln_filter.py -i /n/holylfs05/LABS/informatics/Users/gthomas/spiders/aln/01-Guidance/ -o /n/holylfs05/LABS/informatics/Users/gthomas/spiders/aln/02-Filter --overwrite
#         """

## STRANGE ERROR WHEN INCLUDING THIS RULE:
#RuleException in line 107 of /n/home07/gthomas/projects/spider-wgd/snakemake/cds_aln.smk:
#NameError: The name 'OUTDIR' is unknown in this context. Please make sure that you defined that variable. Also note that braces not used for variable access have to be escaped by repeating them, i.e. {{print $1}}
#
# Tried many variations and get the same error.
# The report of the error seems to suffer from this bug: https://github.com/snakemake/snakemake/issues/1256
# since I deleted everything after this rule (making the entire file ~96 lines long) and it still reports the error on line 107.

#############################################################################

# rule make_gene_trees:
#     input: 
#         os.path.join(DATADIR, "aln", "02-Filter-spec4-seq20-site50", "cds", "{filtered_locus}-cds.guidance.filter.fa")
#     output:
#         os.path.join(DATADIR, "tree", "cds", "loci", "{filtered_locus}", "{filtered_locus}.treefile")
#     params:
#         name = "{filtered_locus}"
#     log:
#         os.path.join(DATADIR, "tree", "logs", "iqtree-cds", "{filtered_locus}-cds-iqtree.log")
#     resources:
#         cpus=1
#     shell:
#      """
#         iqtree -s {input} --prefix {params.name} -B 1000 -T 1 &> {log}
#      """


#############################################################################

# rule run_astral_pro:

#############################################################################